generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//-----------------EVENT----------------------
enum EventCategory {
  Concert
  Sports
  Theater
  Socials
  Other
}

enum Location {
  Bandung
  Jakarta
  Bali
  Surabaya
}

enum EventType {
  Paid
  Free
}

model Event {
  id              String        @id @default(uuid())
  event_name      String?       @unique
  description     String?
  start_time      DateTime?     @db.Time()
  end_time        DateTime?     @db.Time()
  event_date      DateTime?     @db.Date
  location        Location
  venue           String?
  event_type      EventType
  isActive        Boolean       @default(true)
  event_thumbnail String?
  event_preview   String?
  createdAt       DateTime?     @default(now())
  updatedAt       DateTime?     @updatedAt
<<<<<<< HEAD
=======
  coupon_seat     Int?
>>>>>>> 9823d3efad9c5ef8788719155c1e725e9976f841
  category        EventCategory
  Ticket          Ticket[]
  Rating          Rating[]
  Order           Order[]
  Organizer       Organizer?    @relation(fields: [organizerId], references: [id])
  organizerId     String?
<<<<<<< HEAD
=======
  Review          Review[]
>>>>>>> 9823d3efad9c5ef8788719155c1e725e9976f841
}

model Ticket {
  id            Int             @id @default(autoincrement())
  category      String?
  desc          String?
  seats         Int?
<<<<<<< HEAD
  price         Int
=======
  price         Int             @default(0)
>>>>>>> 9823d3efad9c5ef8788719155c1e725e9976f841
  Order_Details Order_Details[]
  Event         Event?          @relation(fields: [eventId], references: [id])
  eventId       String?
}

model Organizer {
  id             String  @id @default(uuid())
  organizer_name String  @unique
  email          String? @unique
  password       String?
  avatar         String? @default("https://res.cloudinary.com/dkyco4yqp/image/upload/v1735131879/HYPETIX-removebg-preview_qxyuj5.png")
  isVerify       Boolean @default(false)
  Event          Event[]
}

model Rating {
  id      Int     @id @default(autoincrement())
  rating  Int
  comment String
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

//------------USER-----------------------

enum Status {
  pending
  success
  cancelled
}

<<<<<<< HEAD
=======
enum RatingRange {
  ONE   @map("1")
  TWO   @map("2")
  THREE @map("3")
  FOUR  @map("4")
  FIVE  @map("5")
}

>>>>>>> 9823d3efad9c5ef8788719155c1e725e9976f841
model User {
  id          String       @id @default(uuid())
  firstName   String
  lastName    String
  email       String       @unique
  password    String
  avatar      String?
  isVerify    Boolean      @default(false)
  ref_code    String
  ref_by      String?
  Order       Order[]
  Rating      Rating[]
  User_Coupon UserCoupon[]
  User_Point  UserPoint[]
<<<<<<< HEAD
=======
  Review      Review[]
>>>>>>> 9823d3efad9c5ef8788719155c1e725e9976f841
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model UserCoupon {
  id         Int      @id @default(autoincrement())
  isRedeem   Boolean  @default(false)
  percentage Int      @default(10)
  createdAt  DateTime @default(now())
  expiredAt  DateTime
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model UserPoint {
  id        Int      @id @default(autoincrement())
  isRedeem  Boolean  @default(false)
  point     Int      @default(10000)
  createdAt DateTime @default(now())
  expiredAt DateTime
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Order {
  id            Int             @id @default(autoincrement())
  total_price   Int
  final_price   Int
  status        Status          @default(pending)
  createdAt     DateTime        @default(now())
  expiredAt     DateTime
  redirect_url  String?
  Order_Details Order_Details[]
  User          User?           @relation(fields: [userId], references: [id])
  userId        String?
  Event         Event?          @relation(fields: [eventId], references: [id])
  eventId       String?
}

model Order_Details {
  quantity Int
  subtotal Int
  Order    Order  @relation(fields: [orderId], references: [id]) // Relation to Order
  orderId  Int
  Ticket   Ticket @relation(fields: [ticketId], references: [id]) // Relation to Ticket
  ticketId Int

  @@id([orderId, ticketId]) // Composite primary key
}
<<<<<<< HEAD
=======

model Review {
  userId    String
  eventId   String
  comment   String
  rating    RatingRange
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  events    Event       @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
}
>>>>>>> 9823d3efad9c5ef8788719155c1e725e9976f841
